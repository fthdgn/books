apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.1"
    defaultConfig {
        applicationId "com.fthdgn.books"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 5
        versionName "0.2.3"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    def supportVersion = '26.1.0'
    def playServiceVersion = '11.6.0'
    def archVersion = '1.0.0'
    def retrofitVersion = '2.3.0'
    def daggerVersion = '2.12'

    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:cardview-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.google.android.gms:play-services-auth:$playServiceVersion"
    implementation "com.google.firebase:firebase-crash:$playServiceVersion"
    implementation "android.arch.persistence.room:runtime:$archVersion"
    implementation "android.arch.lifecycle:runtime:$archVersion"
    implementation "android.arch.lifecycle:extensions:$archVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.github.ittianyu:BottomNavigationViewEx:1.2.3'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "android.arch.persistence.room:compiler:$archVersion"
    kapt "android.arch.lifecycle:compiler:$archVersion"

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    testImplementation 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

/**
 * Signing files.
 * For file format look at signingExample.gradle
 *
 * Google Books API is core part of this getApplication.
 * You have to sign this application for both debug and release build.
 * Create a project from Google Cloud Platform
 * and enter your signing-certificate fingerprint
 * https://console.cloud.google.com/apis/credentials
 * https://support.google.com/cloud/answer/6158849?hl=en#installedapplications&android
 */
if (file('signingDebug.gradle').exists()) {
    apply from: 'signingDebug.gradle'
}
if (file('signingRelease.gradle').exists()) {
    apply from: 'signingRelease.gradle'
}

/**
 * These are optional gradle configurations for release builds,
 * such as Firebase and GitHub integration.
 */
if (file('release.gradle').exists())
    apply from: 'release.gradle'

/**
 * Test specific configurations and tasks
 */
if (file('test.gradle').exists())
    apply from: 'test.gradle'

/**
 * Development specific configurations and tasks
 */
if (file('development.gradle').exists())
    apply from: 'development.gradle'
repositories {
    mavenCentral()
}
